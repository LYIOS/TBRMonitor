{
  "name": "Tbrmonitor",
  "tagline": "iOS App 性能监控（电量，cpu，memory，网络）",
  "body": "###  欢迎进入 TBRMonitor 主页\r\n\r\niOS App 性能监控（内存、电量、网络预警）  \r\n现在还在研发阶段，需求还不完善。 慢慢一些公司和朋友提的需求会进来，功能也会随着完善。\r\n如果发现代码bug或者优化，请联系我。 联系方式见下方。\r\n\r\n### 集成\r\n\r\n#### manual （不推荐）\r\n * 拖动 TBRMonitorFramework 文件夹到 工程所在文件夹，然后可以引入源文件，也可以使用工程生成framework使用\r\n * import <TBRMonitor.h>\r\n\r\n#### Cocoapods  \r\n* 安装cocoapods\r\n* 在Podfile文件添加 TBRMonitor\r\n    ```\r\n    pod 'TBRMonitor', :git => 'https://github.com/huang1988519/TBRMonitor.git'\r\n\r\n    ```   \r\n    因为是在测试阶段，不对外公开，暂时不会支持pod ```search TBRMonitor```   \r\n\r\n*  ``` pod update --no-repo-update ```  \r\n*  ``` import <TBRMonitor.h>```\r\n\r\n等待完成。等待loading结束，集成成功。  \r\n#### carthage\r\n* 创建 Cartfile\r\n* 编辑 Cartfile -> 插入 ```github  \"huang1988519/TBRMonitor\"```\r\n* ```carthage update```\r\n* embedded Carthage/Build/iOS/TBRMonitorFramework.framework 到你的target\r\n\r\n## Usage\r\n**Objective-c**\r\n```\r\n@interface AppDelegate () <TBRMonitorDelegate>\r\n\r\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\r\n    [TBRMonitor startMonotorWithDelegate:self];\r\n    return YES;\r\n}\r\n```  \r\n\r\n然后实现 TBRMonitorDelegate 监听数据\r\n\r\n```\r\n-(void)applicationRecieveBadUrl:(NSDictionary *)dic {\r\n    NSLog(@\"bad url : %@\",dic);\r\n}\r\n- (void)applicationMemoryUsed:(float)usedSpace free:(float)freeSpace cpu:(float)cpuUsage{\r\n    NSLog(@\"used: %f    free: %f    cpu:%f\",usedSpace, freeSpace, cpuUsage);\r\n}\r\n-(void)applicationElectricityChanged:(float)level {\r\n    NSLog(@\"current electricity: %f\",level);\r\n\r\n}\r\n```\r\n\r\n## 主要功能\r\n\r\n**Request**\r\n\r\n通过集成 NSURLProtocol 协议，覆盖协议中的方法，以实现拦截App中的网络请求  \r\n\r\n已实现功能：\r\n* 监测 失败URL ，并通知 \" < TBRMonitorDelegate>\"  \r\n* 统计失败、成功 Request 个数\r\n* 本地URL 日志文件，路径为  \r\n  * Debug   -> /Documents/Record.txt\r\n  * Release -> /Documents/.Record.txt\r\n\r\n* 通过在main bundle创建 Host.plist ,root类型为 NSArray ，监听指定 `host\r\n\r\n缺失功能：\r\n* 到达率\r\n* 网络延迟分析\r\n* ip地址解析\r\n\r\n\r\n\r\n**Memory**\r\n\r\n已实现功能:\r\n* 一帧每秒，快照memory使用情况，并 ```-(void)applicationMemoryUsed:(float)usedSpace free:(float)freeSpace;\r\n``` used 和 free 空间，已  ```kb``` 为单位\r\n\r\n**电量使用情况**\r\n\r\n* 手机电量使用状况。刷新时机为“每当电量有变化时才会通知”。代理方法为``-(void)applicationElectricityChanged:(float)level;\r\n ``\r\n\r\n\r\n**CPU使用**\r\n\r\n* 明天加上。。。\r\n\r\n\r\n**UI 绘制**\r\n* Window 绘制监控数据\r\n\r\n\r\n### 作者和贡献者\r\n * pipa huang\r\n\r\n### Support or Contact\r\n如果有问题，请发邮件到 ```huang1988519@126.com```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}